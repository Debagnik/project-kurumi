/**
 * Summarizes a blog post written in Markdown format using OpenAI via OpenRouter.
 *
 * This function sends the Markdown content to the OpenAI API (via OpenRouter) using the
 * system prompt defined in the environment variable `SYSTEM_PROMPT`. It returns a natural-language
 * summary generated by the AI model.
 *
 * Requirements:
 * - `OPENROUTER_API_KEY` and `SYSTEM_PROMPT` must be set in the environment.
 *
 * @async
 * @function
 * @param {string} markdown - The blog post content written in Markdown format.
 * @returns {Promise<string>} - A summary of the blog post generated by the AI.
 * @throws Will throw an error if the API request fails or the environment variables are not set.
 */
const { OpenAI } = require('openai');

const openRouterApiSecretKey = process.env.OPENROUTER_API_KEY;
const systemPrompt = process.env.SYSTEM_PROMPT;
const LLM = process.env.LLM_MODEL;

if (!openRouterApiSecretKey) {
    throw new Error('OPENROUTER_API_KEY is not set in environment variables');
}

if (!systemPrompt) {
    throw new Error('SYSTEM_PROMPT is not set in environment variables');
}

if (!LLM) {
    throw new Error('LLM is not set in environment variables');
}


const openai = new OpenAI({
    apiKey: openRouterApiSecretKey,
    baseURL: 'https://openrouter.ai/api/v1',

});

async function summerizeMarkdownBody(markdown) {
    try {
        const completion = await openai.chat.completions.create({
            model: LLM,
            stream: false,
            messages: [
                {
                    role: 'system',
                    content: systemPrompt,
                },
                {
                    role: 'user',
                    content: `Summarize the following blog written in Markdown:\n\n${markdown}`,
                },
            ],
        });

        return completion.choices[0].message.content;
    } catch (error) {
        console.error('Error from OpenAI:', error);
        throw new Error('Failed to enhance markdown with AI');
    }
}

module.exports = { summerizeMarkdownBody };
