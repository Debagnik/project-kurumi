/**
 * Summarizes a blog post written in Markdown format using OpenAI via OpenRouter.
 *
 * This function sends the Markdown content to the OpenAI API (via OpenRouter) using the
 * system prompt defined in the environment variable `SYSTEM_PROMPT`. It returns a natural-language
 * summary generated by the AI model.
 *
 * Requirements:
 * - `OPENROUTER_API_KEY` and `SYSTEM_PROMPT` must be set in the environment.
 *
 * @async
 * @function
 * @param {string} markdown - The blog post content written in Markdown format.
 * @returns {Promise<string>} - A summary of the blog post generated by the AI.
 * @throws Will throw an error if the API request fails or the environment variables are not set.
 */
const { OpenAI } = require('openai');
const user = require('../server/models/user');

const openRouterApiSecretKey = process.env.OPENROUTER_API_KEY;
const systemPrompt = process.env.SYSTEM_PROMPT;
const LLM = process.env.LLM_MODEL;
const userPrompt = process.env.USER_PROMPT;
const userPrompt2 = process.env.USER_PROMPT_2;

if (!openRouterApiSecretKey) {
    throw new Error('OPENROUTER_API_KEY is not set in environment variables');
}

if (!process.env.MAX_DESCRIPTION_LENGTH || isNaN(parseInt(process.env.MAX_DESCRIPTION_LENGTH))) {
    throw new Error('MAX_DESCRIPTION_LENGTH is not set in environment variables')
}

if (!systemPrompt) {
    throw new Error('SYSTEM_PROMPT is not set in environment variables');
}

if (!LLM) {
    throw new Error('LLM_MODEL is not set in environment variables');
}

if(!userPrompt || !userPrompt2){
    throw new Error('USER_PROMPT is not set in environment variables');
}


const openai = new OpenAI({
    apiKey: openRouterApiSecretKey,
    baseURL: 'https://openrouter.ai/api/v1',

});

async function summarizeMarkdownBody(markdown) {
    if(!markdown || typeof markdown !== 'string'){
        throw new Error('Invalid markdown input: must be a non-empty string');
    }

    try {
        const outgoingMessage = {
            model: LLM,
            stream: false,
            messages: [
                {
                    role: 'system',
                    content: `${systemPrompt} ${process.env.MAX_DESCRIPTION_LENGTH} characters`,
                },
                {
                    role: 'user',
                    content: `${userPrompt} ${process.env.MAX_DESCRIPTION_LENGTH} ${userPrompt2}:\n\n${markdown}`,
                },
            ],
        };

        const completion = await openai.chat.completions.create(outgoingMessage);

        if(process.env.NODE_ENV !== 'production'){
            console.log("Outgoing Message to LLM:\n", outgoingMessage);
            console.log("Incomming Message from LLM:\n", completion.choices[0].message)
        }
        return { summary: completion.choices[0].message.content,
                 attribute: "\n\n- Summary generated by AI"
         };
    } catch (error) {
        console.error('Error from OpenRouter:', error);
        throw new Error(`Failed to summarize markdown with AI: ${error.message || 'Unknown error'}`);

    }
}

module.exports = { summarizeMarkdownBody };
