meta {
  name: Search
  type: http
  seq: 6
}

post {
  url: {{url}}/search
  body: formUrlEncoded
  auth: inherit
}

headers {
  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8
  Accept-Language: en-US,en;q=0.6
  Cache-Control: max-age=0
  Connection: keep-alive
  Content-Type: application/x-www-form-urlencoded
  DNT: 1
  Origin: null
  Sec-Fetch-Dest: document
  Sec-Fetch-Mode: navigate
  Sec-Fetch-Site: same-origin
  Sec-Fetch-User: ?1
  Sec-GPC: 1
  Upgrade-Insecure-Requests: 1
  User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36
  sec-ch-ua: "Brave";v="135", "Not-A.Brand";v="8", "Chromium";v="135"
  sec-ch-ua-mobile: ?0
  sec-ch-ua-platform: "Windows"
}

body:form-urlencoded {
  searchTerm: post
  _csrf: {{csrf_token}}
}

docs {
  POST /search
  
  Description:
  * Handles a blog post search request.
  * Returns a list of approved posts that match the provided search term, using MongoDB's full-text search.
  
  Middleware Used:
  * csrfProtection – Validates the CSRF token.
  * fetchSiteConfig – Loads site-wide settings like title, description, etc.
  
  Request Body Parameters:
  * searchTerm (string, required): The text to search for.
    * Must be a non-empty string.
    * Maximum length: 100 characters.
  * _csrf (string, required): CSRF token to prevent cross-site request forgery.
  
  Flow:
  1. The input `searchTerm` is sanitized to remove unsafe characters.
  2. A text search is performed in the `posts` collection with `isApproved: true`.
  3. Results are sorted by MongoDB's text score (relevance).
  4. The number of results returned is limited by `siteConfig.searchLimit`.
  
  Success Response:
  * HTTP Status: 200
  * Renders the `search.ejs` view.
  * Response data includes:
    * data: Array of matched posts.
    * searchTerm: Original input value.
    * csrfToken: For securing form actions.
    * Additional data from site config via `res.locals`.
  
  Failure Responses:
  * HTTP 400 – If `searchTerm` is missing or invalid.
  * HTTP 500 – For server/database/view rendering errors.
  
  View Rendered:
  * views/search.ejs – Displays search results or a no-match message.
}
