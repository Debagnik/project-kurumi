meta {
  name: Search
  type: http
  seq: 9
}

post {
  url: {{url}}/search
  body: formUrlEncoded
  auth: inherit
}

headers {
  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8
  Accept-Language: en-US,en;q=0.8
  Cache-Control: max-age=0
  Connection: keep-alive
  Content-Type: application/x-www-form-urlencoded
  DNT: 1
  Origin: null
  Sec-Fetch-Dest: document
  Sec-Fetch-Mode: navigate
  Sec-Fetch-Site: same-origin
  Sec-Fetch-User: ?1
  Sec-GPC: 1
  Upgrade-Insecure-Requests: 1
  User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36
  sec-ch-ua: "Chromium";v="136", "Brave";v="136", "Not.A/Brand";v="99"
  sec-ch-ua-mobile: ?0
  sec-ch-ua-platform: "Windows"
}

body:form-urlencoded {
  searchTerm: miku
  title: 
  author: 
  tags: 
  _csrf: {{csrf_token}}
  isAdvancedSearch: true
}

docs {
  # Route: POST /search
  
  ## Overview
  
  This route handles **simple** and **advanced** blog post searches. It supports keyword-based search, as well as filtering by title, author, and tags. In advanced mode, if no results are found, it automatically falls back to regex-based matching. The results are rendered using the `search.ejs` view.
  
  ---
  
  ## Middleware
  
  - `genericOpenRateLimiter`: Limits request frequency to prevent abuse.
  
  ---
  
  ## Required Request Body Parameters
  
  | Parameter         | Type      | Required | Description                                                                 |
  |-------------------|-----------|----------|-----------------------------------------------------------------------------|
  | `searchTerm`      | String    | ❌ No    | Keyword to search in post `title` and `body`. Used in both simple and advanced search. |
  | `title`           | String    | ❌ No    | (Advanced only) Match posts by exact or partial title.                     |
  | `author`          | String    | ❌ No    | (Advanced only) Full name of the author (matched against user display name). |
  | `tags`            | String    | ❌ No    | (Advanced only) Comma-separated list of tags.                              |
  | `isAdvancedSearch`| Boolean/String | ✅ Yes | Set to `"true"` or `"false"` to enable advanced or simple search modes.     |
  | `isNextPage`      | String    | ❌ No    | `"yes"` or `"no"` to move forward/backward in pagination.                  |
  | `page`            | Number    | ❌ No    | Current page number; defaults to `1` if omitted or invalid.                |
  
  ---
  
  ## Logic Breakdown
  
  ### 1. **Pagination**
  
  - Uses `page` to determine skip offset.
  - Supports relative navigation using `isNextPage`.
  
  ### 2. **Sanitization**
  
  - `searchTerm`, `title`, and `author` are sanitized using `sanitizeHtml()`.
  - `tags` are parsed using a custom `parseTags()` function.
  
  ### 3. **Advanced Search Mode**
  
  - Matches posts by:
    - Keyword (regex on `title` and `body`)
    - Exact `title`
    - Author name → resolved to username
    - Tags (`$in` match)
  - If no results are found, retries with fallback regex on `title` and `body`.
  
  ### 4. **Simple Search Mode**
  
  - Uses MongoDB `$text` index with `searchTerm`.
  - Validates keyword length and sanitizes for injection safety.
  
  ### 5. **Response**
  
  - On success:
    - Renders the `search.ejs` view with results, pagination, and input values.
  - On failure:
    - Returns `400` if invalid/missing input.
    - Returns `500` for internal server errors.
  
  ---
  
  ## Return Behavior
  
  | Scenario                                  | HTTP Status | Behavior                                                   |
  |-------------------------------------------|-------------|------------------------------------------------------------|
  | Search results found                      | 200 OK      | Renders `search.ejs` with post data and pagination info    |
  | Invalid keyword in simple search          | 400         | Returns `{ error: "Invalid keyword for simple search" }`   |
  | Missing/invalid `isAdvancedSearch` flag   | 400         | Returns `{ error: "Missing or invalid isAdvancedSearch flag" }` |
  | Internal error (DB, logic failure, etc.)  | 500         | Renders `error.ejs` with a generic message                 |
  
  ---
  
  ## Notes
  
  - Pagination is **stateful**, handled using `page` and `isNextPage`.
  - Regex fallback only occurs in advanced search mode when initial search yields zero results.
  - Author name resolution queries the `user` collection for a matching display name.
  - `csrfToken` is generated and included in the rendered search view for CSRF protection.
  
}
