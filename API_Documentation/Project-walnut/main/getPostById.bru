meta {
  name: getPostById
  type: http
  seq: 5
}

get {
  url: {{url}}/post/:id
  body: none
  auth: inherit
}

params:path {
  id: 680148bc20abde10df2bb054
}

headers {
  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8
  Accept-Language: en-US,en;q=0.6
  Connection: keep-alive
  DNT: 1
  If-None-Match: W/"4bca-nloyXuQV2SemDNVitminN3I3P+8"
  Sec-Fetch-Dest: document
  Sec-Fetch-Mode: navigate
  Sec-Fetch-Site: same-origin
  Sec-Fetch-User: ?1
  Sec-GPC: 1
  Upgrade-Insecure-Requests: 1
  User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36
  sec-ch-ua: "Brave";v="135", "Not-A.Brand";v="8", "Chromium";v="135"
  sec-ch-ua-mobile: ?0
  sec-ch-ua-platform: "Windows"
}

docs {
  GET /post/:id
  
  Description:
  Displays a specific blog post based on its MongoDB _id. Includes post metadata, author details, comments, and conditionally shows the post based on approval status or user privileges.
  
  Middleware:
  * fetchSiteConfig: Attaches site-wide config to res.locals.
  * csrfProtection: Adds CSRF protection to the rendered post page.
  
  Parameters:
  * :id (Path Param): MongoDB _id of the blog post to retrieve.
  
  Access:
  * Public if post is approved.
  * Admin/Moderator can view unapproved posts.
  
  Behavior:
  * Authenticates the current user (via JWT cookie).
  * Fetches post by ID.
  * Verifies if the post exists.
  *Fetches post author name from the users collection.
  * Determines if CAPTCHA is enabled (based on site config).
  * Fetches comments for the post.
  * Renders the post if approved or the user is authorized (Admin/Mod/Editor).
  * Redirects to /404 if unauthorized or not found.
  
  Template Rendered:
  posts.ejs
  
  Error Handling:
  * Logs error and renders 404.ejs if post not found or an exception occurs.
}
