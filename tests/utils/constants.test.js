const { CONSTANTS } = require('../../utils/constants');

describe('Constants Module', () => {
  describe('CONSTANTS object', () => {
    test('should be frozen and immutable', () => {
      expect(Object.isFrozen(CONSTANTS)).toBe(true);
      // In non-strict mode, assignment to frozen object fails silently
      const originalLength = Object.keys(CONSTANTS).length;
      CONSTANTS.NEW_PROP = 'test';
      expect(Object.keys(CONSTANTS).length).toBe(originalLength);
      expect(CONSTANTS.NEW_PROP).toBeUndefined();
    });

    test('should contain all required regex patterns', () => {
      expect(CONSTANTS.USERNAME_REGEX).toBeInstanceOf(RegExp);
      expect(CONSTANTS.HAS_UPPERCASE_REGEX).toBeInstanceOf(RegExp);
      expect(CONSTANTS.HAS_LOWERCASE_REGEX).toBeInstanceOf(RegExp);
      expect(CONSTANTS.HAS_NUMBERS_REGEX).toBeInstanceOf(RegExp);
      expect(CONSTANTS.HAS_SPECIAL_CHAR_REGEX).toBeInstanceOf(RegExp);
      expect(CONSTANTS.GA_REGEX).toBeInstanceOf(RegExp);
      expect(CONSTANTS.INSPECTLET_REGEX).toBeInstanceOf(RegExp);
      expect(CONSTANTS.CLARITY_REGEX).toBeInstanceOf(RegExp);
      expect(CONSTANTS.EMAIL_REGEX).toBeInstanceOf(RegExp);
      expect(CONSTANTS.TAGS_REGEX).toBeInstanceOf(RegExp);
      expect(CONSTANTS.UNIQUE_ID_GENERATION_REGEX).toBeInstanceOf(RegExp);
      expect(CONSTANTS.REMOVE_ALL_SPACES_REGEX).toBeInstanceOf(RegExp);
    });

    test('should validate username regex correctly', () => {
      const validUsernames = ['user123', 'test_user', 'user.name', 'user+tag', 'user@domain'];
      const invalidUsernames = ['user space', 'user#hash', 'user$dollar', 'user!exclaim'];

      validUsernames.forEach(username => {
        expect(CONSTANTS.USERNAME_REGEX.test(username)).toBe(true);
      });

      invalidUsernames.forEach(username => {
        expect(CONSTANTS.USERNAME_REGEX.test(username)).toBe(false);
      });
    });

    test('should validate email regex correctly', () => {
      const validEmails = ['test@example.com', 'user.name@domain.co.uk', 'user+tag@example.org'];
      const invalidEmails = ['invalid-email', '@domain.com', 'user@', 'user@domain'];

      validEmails.forEach(email => {
        expect(CONSTANTS.EMAIL_REGEX.test(email)).toBe(true);
      });

      invalidEmails.forEach(email => {
        expect(CONSTANTS.EMAIL_REGEX.test(email)).toBe(false);
      });
    });

    test('should contain correct privilege levels', () => {
      expect(CONSTANTS.PRIVILEGE_LEVELS_ENUM.WEBMASTER).toBe(1);
      expect(CONSTANTS.PRIVILEGE_LEVELS_ENUM.MODERATOR).toBe(2);
      expect(CONSTANTS.PRIVILEGE_LEVELS_ENUM.EDITOR).toBe(3);
    });

    test('should contain correct numeric constants', () => {
      expect(CONSTANTS.PASSWORD_MIN_LENGTH).toBe(8);
      expect(CONSTANTS.DEFAULT_COMMENT_LIMIT).toBe(10);
      expect(CONSTANTS.CLAMP_COMMENT_MIN).toBe(1);
      expect(CONSTANTS.CLAMP_COMMENT_MAX).toBe(50);
    });

    test('should contain correct string constants', () => {
      expect(CONSTANTS.EMPTY_STRING).toBe('');
      expect(CONSTANTS.AI_ATTRIBUTE).toBe('\n\n\t\- Summary generated by AI');
    });

    test('should contain sanitize filter object', () => {
      expect(CONSTANTS.SANITIZE_FILTER).toEqual({
        allowedTags: [],
        allowedAttributes: {}
      });
    });
  });
});